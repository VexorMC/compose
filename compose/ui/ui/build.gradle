/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.AndroidXComposePlugin
import androidx.build.JetbrainsAndroidXPlugin
import androidx.build.LibraryType

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("AndroidXComposePlugin")
    id("kotlinx-atomicfu")
    id("JetbrainsAndroidXPlugin")
}

AndroidXComposePlugin.applyAndConfigureKotlinPlugin(project)
JetbrainsAndroidXPlugin.applyAndConfigure(project)

dependencies {

    constraints {
        // In 1.4.0-alpha02 there was a change made in :compose:ui:ui which fixed an issue where
        // we were over-invalidating layout. This change caused a corresponding regression in
        // foundation's CoreText, where it was expecting a layout to happen but with this change
        // it would not. A corresponding fix for this was added in 1.4.0-alpha02 of
        // :compose:foundation:foundation. By adding this constraint, we are ensuring that the
        // if an app has this ui module _and_ the foundation module as a dependency, then the
        // version of foundation will be at least this version. This will prevent the bug in
        // foundation from occurring. This does _NOT_ require that the app have foundation as
        // a dependency.
        implementation(project(":compose:foundation:foundation")) {
            because 'prevents a critical bug in Text'
        }
    }
    if(!AndroidXComposePlugin.isMultiplatformEnabled(project)) {
        /*
         * When updating dependencies, make sure to make the an an analogous update in the
         * corresponding block below
         */
        implementation(libs.kotlinStdlibCommon)
        implementation(libs.kotlinCoroutinesCore)
        implementation(libs.atomicFu)

        // when updating the runtime version please also update the runtime-saveable version
        implementation(project(":compose:runtime:runtime"))
        api(project(":compose:runtime:runtime-saveable"))

        api(project(":compose:ui:ui-geometry"))
        api(project(":compose:ui:ui-graphics"))
        api(project(":compose:ui:ui-text"))
        api(project(":compose:ui:ui-unit"))
        api("androidx.annotation:annotation:1.5.0")

        // This has stub APIs for access to legacy Android APIs, so we don't want
        // any dependency on this module.
        compileOnly(project(":compose:ui:ui-android-stubs"))

        implementation(project(":compose:ui:ui-util"))
        implementation(libs.kotlinStdlib)
        implementation("androidx.autofill:autofill:1.0.0")
        implementation(libs.kotlinCoroutinesAndroid)

        // Used to generate debug information in the layout inspector. If not present,
        // we may fall back to more limited data.
        compileOnly(libs.kotlinReflect)
        testImplementation(libs.kotlinReflect)

        implementation("androidx.activity:activity-ktx:1.7.0-rc01")
        implementation("androidx.core:core:1.9.0")
        implementation('androidx.collection:collection:1.0.0')
        implementation("androidx.customview:customview-poolingcontainer:1.0.0")
        implementation("androidx.savedstate:savedstate-ktx:1.2.0")
        implementation("androidx.lifecycle:lifecycle-runtime:2.6.0")
        implementation("androidx.lifecycle:lifecycle-viewmodel:2.6.0")
        implementation("androidx.profileinstaller:profileinstaller:1.2.1")
        implementation("androidx.emoji2:emoji2:1.2.0")

        testImplementation(libs.testRules)
        testImplementation(libs.testRunner)
        testImplementation(libs.kotlinCoroutinesTest)
        testImplementation(libs.junit)
        testImplementation(libs.truth)
        testImplementation(libs.mockitoCore4)
        testImplementation(libs.mockitoKotlin4)
        testImplementation(libs.robolectric)
        testImplementation(project(":compose:ui:ui-test-junit4"))
        testImplementation(project(":compose:test-utils"))

        androidTestImplementation(libs.testCore)
        androidTestImplementation(libs.testRules)
        androidTestImplementation(libs.testRunner)
        androidTestImplementation(libs.testExtJunitKtx)
        androidTestImplementation(libs.testUiautomator)
        androidTestImplementation(libs.kotlinCoroutinesTest)
        androidTestImplementation(libs.kotlinTest)
        androidTestImplementation(libs.espressoCore)
        androidTestImplementation(libs.bundles.espressoContrib)
        androidTestImplementation(libs.junit)
        androidTestImplementation(libs.dexmakerMockito)
        androidTestImplementation(libs.mockitoCore)
        androidTestImplementation(libs.truth)
        androidTestImplementation(libs.mockitoKotlin)
        androidTestImplementation(libs.material)
        androidTestImplementation(project(":compose:animation:animation-core"))
        androidTestImplementation(project(":compose:foundation:foundation"))
        androidTestImplementation(project(":compose:foundation:foundation-layout"))
        androidTestImplementation(project(":compose:material:material"))
        androidTestImplementation(project(":compose:test-utils"))
        androidTestImplementation(project(":internal-testutils-fonts"))
        androidTestImplementation(project(":compose:ui:ui-test-junit4"))
        androidTestImplementation(project(":internal-testutils-runtime"))
        androidTestImplementation(androidxArtifact(":test:screenshot:screenshot"))
        androidTestImplementation("androidx.lifecycle:lifecycle-runtime-testing:2.6.0")
        androidTestImplementation("androidx.recyclerview:recyclerview:1.3.0-alpha02")
        androidTestImplementation("androidx.core:core-ktx:1.9.0")
        androidTestImplementation("androidx.activity:activity-compose:1.7.0-rc01")
        androidTestImplementation("androidx.appcompat:appcompat:1.3.0")
        androidTestImplementation("androidx.fragment:fragment:1.3.0")

        lintChecks(project(":compose:ui:ui-lint"))
        lintPublish(project(":compose:ui:ui-lint"))

        samples(project(":compose:ui:ui:ui-samples"))
    }
}

if(AndroidXComposePlugin.isMultiplatformEnabled(project)) {
    androidXComposeMultiplatform {
        android()
        desktop()
        darwin()
        js()
        wasm()
        iosInstrumentedTest()

        configureDarwinFlags()
    }

    kotlin {
        /*
         * When updating dependencies, make sure to make the an an analogous update in the
         * corresponding block above
         */
        sourceSets {
            commonMain.dependencies {
                implementation(project(":collection:collection"))
                implementation(libs.kotlinStdlibCommon)
                implementation(libs.kotlinCoroutinesCore)
                implementation(libs.atomicFu)

                // when updating the runtime version please also update the runtime-saveable version
                implementation(project(":compose:runtime:runtime"))
                api(project(":compose:runtime:runtime-saveable"))

                api project(":compose:ui:ui-geometry")
                api project(":compose:ui:ui-graphics")
                api project(":compose:ui:ui-text")
                api project(":compose:ui:ui-unit")
                api project(":compose:ui:ui-util")
                implementation(project(":annotation:annotation"))
                implementation(project(":lifecycle:lifecycle-common"))
                implementation(project(":lifecycle:lifecycle-runtime"))
                implementation(project(":lifecycle:lifecycle-runtime-compose"))
                implementation(project(":lifecycle:lifecycle-viewmodel"))
            }

            androidMain.dependencies {
                implementation(libs.kotlinStdlib)
                // This has stub APIs for access to legacy Android APIs, so we don't want
                // any dependency on this module.
                compileOnly(project(":compose:ui:ui-android-stubs"))
                api("androidx.annotation:annotation:1.5.0")
                implementation("androidx.autofill:autofill:1.0.0")
                implementation(libs.kotlinCoroutinesAndroid)

                implementation("androidx.activity:activity-ktx:1.7.0-rc01")
                implementation("androidx.core:core:1.9.0")
                implementation('androidx.collection:collection:1.0.0')
                implementation("androidx.customview:customview-poolingcontainer:1.0.0")
                implementation("androidx.savedstate:savedstate-ktx:1.2.0")
                implementation("androidx.lifecycle:lifecycle-runtime:2.6.0")
                implementation("androidx.lifecycle:lifecycle-viewmodel:2.6.0")
                implementation("androidx.emoji2:emoji2:1.2.0")
            }

            jvmMain.dependencies {
                implementation(libs.kotlinStdlib)
            }
            skikoMain {
                dependsOn(commonMain)
                dependencies {
                    api(project(":compose:ui:ui-graphics"))
                    api(project(":compose:ui:ui-text"))
                    api(libs.skikoCommon)
                }
            }
            uikitMain {
                dependencies {
                    api project(":compose:ui:ui-uikit")
                }
            }
            notMobileMain.dependsOn(skikoMain)
            desktopMain {
                dependsOn(notMobileMain)
                dependencies {
                    implementation(libs.kotlinStdlibJdk8)
                }
            }

            jsNativeMain.dependsOn(skikoMain)
            nativeMain.dependsOn(jsNativeMain)
            jsWasmMain.dependsOn(jsNativeMain)
            jsWasmMain.dependsOn(notMobileMain)
            macosMain.dependsOn(notMobileMain)

            jsMain {
                kotlin.srcDir("src/webCommonW3C/kotlin")
                dependsOn(jsWasmMain)
                dependencies {
                    api(libs.skikoCommon)
                }
            }

            wasmJsMain {
                kotlin.srcDir("src/webCommonW3C/kotlin")
                dependsOn(jsWasmMain)
                dependencies {
                    implementation(libs.kotlinStdlib)
                    implementation(libs.create("skikoWasm"))
                    implementation(libs.create("skikoWasmWasm"))
                }
            }

            commonTest.dependencies {
                implementation(libs.kotlinReflect)
            }

            // TODO(b/214407011): These dependencies leak into instrumented tests as well. If you
            //  need to add Robolectric (which must be kept out of androidAndroidTest), use a top
            //  level dependencies block instead:
            //  `dependencies { testImplementation(libs.robolectric) }`
            androidTest.dependencies {
                implementation(libs.testRules)
                implementation(libs.testRunner)
                implementation(libs.kotlinCoroutinesTest)
                implementation(libs.junit)
                implementation(libs.truth)
                implementation(libs.mockitoCore4)
                implementation(libs.mockitoKotlin4)
                implementation(project(":compose:ui:ui-test-junit4"))
                implementation(project(":internal-testutils-fonts"))
                implementation(project(":compose:test-utils"))
            }

            androidAndroidTest.dependencies {
                implementation("androidx.fragment:fragment:1.3.0")
                implementation("androidx.appcompat:appcompat:1.3.0")
                implementation(libs.testUiautomator)
                implementation(libs.testRules)
                implementation(libs.testRunner)
                implementation(libs.testExtJunitKtx)
                implementation(libs.kotlinCoroutinesTest)
                implementation(libs.kotlinTest)
                implementation(libs.espressoCore)
                implementation(libs.bundles.espressoContrib)
                implementation(libs.junit)
                implementation(libs.dexmakerMockito)
                implementation(libs.mockitoCore)
                implementation(libs.truth)
                implementation(libs.mockitoKotlin)
                implementation(libs.material)
                implementation(project(":compose:animation:animation-core"))
                implementation(project(":compose:foundation:foundation"))
                implementation(project(":compose:foundation:foundation-layout"))
                implementation(project(":compose:material:material"))
                implementation(project(":compose:test-utils"))
                implementation(project(":internal-testutils-fonts"))
                implementation(project(":compose:ui:ui-test-junit4"))
                implementation(project(":internal-testutils-runtime"))
                implementation(androidxArtifact(":test:screenshot:screenshot"))
                implementation("androidx.lifecycle:lifecycle-runtime-testing:2.6.0")
                implementation("androidx.recyclerview:recyclerview:1.3.0-alpha02")
                implementation("androidx.core:core-ktx:1.2.0")
                implementation("androidx.activity:activity-compose:1.7.0-rc01")
            }

            skikoTest.dependencies {
                implementation(libs.kotlinTest)
                implementation(libs.kotlinCoroutinesTest)
                implementation(project(":compose:material:material"))
                implementation(project(":compose:foundation:foundation"))
                implementation(project(":compose:ui:ui-test-junit4"))
            }

            desktopTest {
                dependsOn(skikoTest)
            }
            nativeTest {
                dependsOn(skikoTest)
            }
            jsTest {
                kotlin.srcDir("src/webTest/kotlin")
                dependsOn(skikoTest)
            }
            wasmJsTest {
                kotlin.srcDir("src/webTest/kotlin")
                dependsOn(skikoTest)
            }
            uikitInstrumentedTest.dependencies {
                implementation(project(":compose:material:material"))
                implementation(project(":compose:foundation:foundation"))
            }

            desktopTest.dependencies {
                implementation(libs.truth)
                implementation(libs.kotlinTest)
                implementation(libs.mockitoCore)
                implementation(libs.mockitoCore4)
                implementation(libs.mockitoKotlin)
                implementation(libs.mockitoKotlin4)
                implementation(libs.skikoCurrentOs)
                implementation(libs.kotlinCoroutinesSwing)
                implementation(libs.kotlinCoroutinesTest)
                implementation(project(":compose:material:material"))
                implementation(project(":compose:ui:ui-test-junit4"))
            }

            configureEach {
                languageSettings.optIn("androidx.compose.ui.ExperimentalComposeUiApi")
                languageSettings.optIn("androidx.compose.ui.InternalComposeUiApi")
            }
        }
    }
    dependencies {
        samples(project(":compose:ui:ui:ui-samples"))

        // Can't declare this in kotlin { sourceSets { androidTest.dependencies { .. } } } as that
        // leaks into instrumented tests (b/214407011)
        testImplementation(libs.robolectric)
    }
}

// This task updates the translations of the localizable strings in this module.
// It obtains them from Android's base repository.
tasks.register("updateTranslations", UpdateTranslationsTask.class) {
    group = "localization"
    gitRepo = "https://android.googlesource.com/platform/frameworks/base"
    repoResDirectories = ["core/res/res"]
    targetDirectory = project.file("src/desktopMain/kotlin/androidx/compose/ui/platform/l10n")
    targetPackageName = "androidx.compose.ui.platform.l10n"
    kotlinStringsPackageName = "androidx.compose.ui.platform"
    stringByResourceName = [
            "copy": "Copy",
            "paste": "Paste",
            "cut": "Cut",
            "selectAll": "SelectAll"
    ]
    // This is all the locales translated by Compose on Android in the ui module:
    // https://github.com/androidx/androidx/tree/androidx-main/compose/ui/ui/src/androidMain/res
    // with the exception of
    // - b+sr+Latn which doesn't appear to be supported by Java
    // - en_XC which has weird invisible LRM characters, and the visible text is the same as for
    //   en anyway.
    locales = [
            "en", "af", "am", "ar", "as", "az", "be", "bg", "bn", "bs", "ca", "cs", "da", "de",
            "el", "en_AU", "en_CA", "en_GB", "en_IN", "es", "es_US", "et", "eu", "fa",
            "fi", "fr", "fr_CA", "gl", "gu", "hi", "hr", "hu", "hy", "in", "is", "it", "iw",
            "ja", "ka", "kk", "km", "kn", "ko", "ky", "lo", "lt", "lv", "mk", "ml", "mn", "mr",
            "ms", "my", "nb", "ne", "nl", "or", "pa", "pl", "pt", "pt_BR", "pt_PT", "ro", "ru",
            "si", "sk", "sl", "sq", "sr", "sv", "sw", "ta", "te", "th", "tl", "tr", "uk", "ur",
            "uz", "vi", "zh_CN", "zh_HK", "zh_TW", "zu"
    ]
}

androidx {
    name = "Compose UI primitives"
    type = LibraryType.PUBLISHED_LIBRARY
    inceptionYear = "2019"
    description = "Compose UI primitives. This library contains the primitives that form the Compose UI Toolkit, such as drawing, measurement and layout."
    legacyDisableKotlinStrictApiMode = true
}

if(AndroidXComposePlugin.isMultiplatformEnabled(project)) {
    tasks.findByName("desktopTest").configure {
        systemProperties["GOLDEN_PATH"] = project.rootDir.absolutePath + "/golden"
    }
}

android {
    testOptions.unitTests.includeAndroidResources = true
    buildTypes.all {
        consumerProguardFiles("proguard-rules.pro")
    }
}

// Screenshot tests related setup
android {
    sourceSets.androidTest.assets.srcDirs +=
            project.rootDir.absolutePath + "/golden/compose/ui/ui"
    namespace "androidx.compose.ui"
    // namespace has to be unique, but default androidx.compose.ui.test package is taken by
    // the androidx.compose.ui:ui-test library
    testNamespace "androidx.compose.ui.tests"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_9
        targetCompatibility JavaVersion.VERSION_1_9
    }
}

// Diagnostics for b/188565660
def verifyKotlinModule(String variant) {
    project.afterEvaluate {
        def capitalVariant = variant.capitalize()
        def moduleFile = new File("${buildDir}/tmp/kotlin-classes/${variant}/META-INF/ui_${variant}.kotlin_module")
        tasks.named("compile${capitalVariant}Kotlin").configure { t ->
            t.doLast {
                // This file should be large, about 3.2K. If this file is short then many symbols will fail to resolve
                if (moduleFile.length() < 250) {
                    throw new GradleException("kotlin_module file ($moduleFile) too short! See b/188565660 for more information. File text: ${moduleFile.text}")
                }
            }
        }
    }
}
if (!AndroidXComposePlugin.isMultiplatformEnabled(project)) {
    for (variant in ["debug", "release"]) {
        verifyKotlinModule(variant)
    }
}
